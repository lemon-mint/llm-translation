// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1beta1/translate.proto

package apiv1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/lemon-mint/llm-translation/api/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TranslationServiceName is the fully-qualified name of the TranslationService service.
	TranslationServiceName = "api.v1beta1.TranslationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TranslationServiceHealthzProcedure is the fully-qualified name of the TranslationService's
	// healthz RPC.
	TranslationServiceHealthzProcedure = "/api.v1beta1.TranslationService/healthz"
	// TranslationServiceTranslateProcedure is the fully-qualified name of the TranslationService's
	// translate RPC.
	TranslationServiceTranslateProcedure = "/api.v1beta1.TranslationService/translate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	translationServiceServiceDescriptor         = v1beta1.File_api_v1beta1_translate_proto.Services().ByName("TranslationService")
	translationServiceHealthzMethodDescriptor   = translationServiceServiceDescriptor.Methods().ByName("healthz")
	translationServiceTranslateMethodDescriptor = translationServiceServiceDescriptor.Methods().ByName("translate")
)

// TranslationServiceClient is a client for the api.v1beta1.TranslationService service.
type TranslationServiceClient interface {
	Healthz(context.Context, *connect.Request[v1beta1.HealthzRequest]) (*connect.Response[v1beta1.HealthzResponse], error)
	Translate(context.Context, *connect.Request[v1beta1.TranslateRequest]) (*connect.Response[v1beta1.TranslateResponse], error)
}

// NewTranslationServiceClient constructs a client for the api.v1beta1.TranslationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTranslationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TranslationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &translationServiceClient{
		healthz: connect.NewClient[v1beta1.HealthzRequest, v1beta1.HealthzResponse](
			httpClient,
			baseURL+TranslationServiceHealthzProcedure,
			connect.WithSchema(translationServiceHealthzMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		translate: connect.NewClient[v1beta1.TranslateRequest, v1beta1.TranslateResponse](
			httpClient,
			baseURL+TranslationServiceTranslateProcedure,
			connect.WithSchema(translationServiceTranslateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// translationServiceClient implements TranslationServiceClient.
type translationServiceClient struct {
	healthz   *connect.Client[v1beta1.HealthzRequest, v1beta1.HealthzResponse]
	translate *connect.Client[v1beta1.TranslateRequest, v1beta1.TranslateResponse]
}

// Healthz calls api.v1beta1.TranslationService.healthz.
func (c *translationServiceClient) Healthz(ctx context.Context, req *connect.Request[v1beta1.HealthzRequest]) (*connect.Response[v1beta1.HealthzResponse], error) {
	return c.healthz.CallUnary(ctx, req)
}

// Translate calls api.v1beta1.TranslationService.translate.
func (c *translationServiceClient) Translate(ctx context.Context, req *connect.Request[v1beta1.TranslateRequest]) (*connect.Response[v1beta1.TranslateResponse], error) {
	return c.translate.CallUnary(ctx, req)
}

// TranslationServiceHandler is an implementation of the api.v1beta1.TranslationService service.
type TranslationServiceHandler interface {
	Healthz(context.Context, *connect.Request[v1beta1.HealthzRequest]) (*connect.Response[v1beta1.HealthzResponse], error)
	Translate(context.Context, *connect.Request[v1beta1.TranslateRequest]) (*connect.Response[v1beta1.TranslateResponse], error)
}

// NewTranslationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTranslationServiceHandler(svc TranslationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	translationServiceHealthzHandler := connect.NewUnaryHandler(
		TranslationServiceHealthzProcedure,
		svc.Healthz,
		connect.WithSchema(translationServiceHealthzMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	translationServiceTranslateHandler := connect.NewUnaryHandler(
		TranslationServiceTranslateProcedure,
		svc.Translate,
		connect.WithSchema(translationServiceTranslateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1beta1.TranslationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TranslationServiceHealthzProcedure:
			translationServiceHealthzHandler.ServeHTTP(w, r)
		case TranslationServiceTranslateProcedure:
			translationServiceTranslateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTranslationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTranslationServiceHandler struct{}

func (UnimplementedTranslationServiceHandler) Healthz(context.Context, *connect.Request[v1beta1.HealthzRequest]) (*connect.Response[v1beta1.HealthzResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1beta1.TranslationService.healthz is not implemented"))
}

func (UnimplementedTranslationServiceHandler) Translate(context.Context, *connect.Request[v1beta1.TranslateRequest]) (*connect.Response[v1beta1.TranslateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1beta1.TranslationService.translate is not implemented"))
}
